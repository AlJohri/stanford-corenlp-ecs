#!/usr/bin/env bash

# This is a thin wrapper around the `ecs-cli` command line tool to set sensible
# defaults for this project. It also makes the `ecs-cli up` comamnd more
# seamless by creating a `default` keypair and using the default vpc, security groups
# etc.

set -e

export AWS_PROFILE=al2
export AWS_REGION=us-east-1

export ECS_CLUSTER=default
export LOAD_BALANCER_NAME=default
export TARGET_GROUP_NAME=default
export KEY_PAIR_NAME=default

export COMPOSE_PROJECT_NAME=corenlp
export COMPOSE_FILE=docker-compose.prod.yml

case $1 in

    up)

        PEM_FILE_PATH="$HOME/.ssh/${AWS_PROFILE}_${KEY_PAIR_NAME}.pem"

        # Get Default VPC
        VPC_ID=$(aws ec2 describe-vpcs --query '(Vpcs[?IsDefault==`true`])[0].VpcId' --output text)

        # Get only first two subnets since load balancer only works across two availability zones (i.e two subnets)
        SUBNET_IDS=$(aws ec2 describe-subnets --query "(Subnets[?VpcId==\`$VPC_ID\`])[0:2].SubnetId" \
                        --output text | tr -s '[:blank:]' ',')

        # Get Default Security Group
        SECURITY_GROUP=$(aws ec2 describe-security-groups \
            --group-names default \
            --query 'SecurityGroups[0].GroupId' --output text)

        # Get current IP and convert to CIDR block for adding to default security group
        CIDR=$(curl -s http://checkip.amazonaws.com)/32

        # Add CIDR block to default security group
        set +e
        SG_INGRESS_CHECK=$(aws ec2 authorize-security-group-ingress \
            --group-name default \
            --ip-permissions IpProtocol=-1,IpRanges="[{CidrIp=$CIDR}]" 2>&1)
        set -e

        # Do not print error if CIDR block already exists in security group
        case $SG_INGRESS_CHECK in
            *"InvalidPermission.Duplicate"*)
                # Do Nothing on InvalidPermission.Duplicate
                ;;
            *)
                echo "$SG_INGRESS_CHECK"
                ;;
        esac

        # Check if `default` key-pair exists and create new key-pair if not
        CHECK_KEY_PAIR=$(aws ec2 describe-key-pairs --query "(KeyPairs[?KeyName==\`$KEY_PAIR_NAME\`])[0].KeyName" --output text)
        if [ -z $CHECK_KEY_PAIR ]; then
            echo "$KEY_PAIR_NAME keypair does not exist. creating..."
            PEM=$(aws ec2 create-key-pair --key-name default --query 'KeyMaterial' --output text)
            touch "$PEM_FILE_PATH"
            echo "$PEM" > "$PEM_FILE_PATH"
            chmod 600 "$PEM_FILE_PATH"
            echo "created ${KEY_PAIR_NAME} key pair at ${PEM_FILE_PATH}"
        fi

        ROLE_ARN=$(aws iam list-roles --query '(Roles[?RoleName==`AWSServiceRoleForECS`])[0].Arn' --output text)
        if [ $ROLE_ARN = "None" ]; then
            aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com
            ROLE_ARN=$(aws iam list-roles --query '(Roles[?RoleName==`AWSServiceRoleForECS`])[0].Arn' --output text)
        fi

        ALB_ARN=$(aws elbv2 describe-load-balancers \
            --query "(LoadBalancers[?LoadBalancerName==\`$LOAD_BALANCER_NAME\`])[0].LoadBalancerArn" --output text)
        if [ $ALB_ARN = "None" ]; then
            echo "$LOAD_BALANCER_NAME load balancer does not exist. creating..."
            ALB_ARN=$(aws elbv2 create-load-balancer \
                        --name "$LOAD_BALANCER_NAME" \
                        --subnets $(echo $SUBNET_IDS | tr -s ',' '[:blank:]') \
                        --security-groups "$SECURITY_GROUP" \
                        --query 'LoadBalancers[0].LoadBalancerArn' --output text)
            echo "$ALB_ARN"
        fi

        aws elbv2 modify-load-balancer-attributes --load-balancer-arn $ALB_ARN --attributes Key=idle_timeout.timeout_seconds,Value=360 1>/dev/null

        TG_ARN=$(aws elbv2 describe-target-groups \
            --query "(TargetGroups[?TargetGroupName==\`$TARGET_GROUP_NAME\`])[0].TargetGroupArn" --output text)
        if [ $TG_ARN = "None" ]; then
            echo "$TARGET_GROUP_NAME target group does not exist. creating..."
            TG_ARN=$(aws elbv2 create-target-group \
                        --name default --protocol HTTP --port 80 --vpc-id "$VPC_ID" \
                        --query 'TargetGroups[0].TargetGroupArn' --output text)
            echo "$TG_ARN"
        fi

        aws elbv2 modify-target-group-attributes --target-group-arn $TG_ARN --attributes Key=deregistration_delay.timeout_seconds,Value=0 1>/dev/null

        LISTNER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn "$ALB_ARN" \
            --query "(Listeners[?LoadBalancerArn==\`$ALB_ARN\`])[0].ListenerArn" --output text)
        if [ $LISTNER_ARN = "None" ]; then
            echo "default listner does not exist. creating..."
            LISTNER_ARN=$(aws elbv2 create-listener \
                        --load-balancer-arn "$ALB_ARN" --protocol HTTP --port 80  \
                        --default-actions Type=forward,TargetGroupArn="$TG_ARN" \
                        --query 'Listeners[0].ListenerArn' \
                        --output text)
            echo "$LISTNER_ARN"
        fi

        ecs-cli up \
            --launch-type EC2 \
            --keypair "$KEY_PAIR_NAME" \
            --vpc "$VPC_ID" \
            --subnets "$SUBNET_IDS" \
            --security-group "$SECURITY_GROUP" \
            --capability-iam \
            "${@:2}"

        LB_DNS=$(aws elbv2 describe-load-balancers \
                    --query "(LoadBalancers[?LoadBalancerName==\`$LOAD_BALANCER_NAME\`])[0].DNSName" --output text)

        echo "Load Balancer is at: http://$LB_DNS"

        ;;

    down)

        ecs-cli compose service rm

        ALB_ARN=$(aws elbv2 describe-load-balancers \
                    --query "(LoadBalancers[?LoadBalancerName==\`$LOAD_BALANCER_NAME\`])[0].LoadBalancerArn" --output text)

        if [ $ALB_ARN != "None" ]; then

            LISTNER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn "$ALB_ARN" \
                            --query "(Listeners[?LoadBalancerArn==\`$ALB_ARN\`])[0].ListenerArn" --output text)

            if [ $LISTNER_ARN != "None" ]; then
                echo "Tearing down default listner..."
                aws elbv2 delete-listener --listener-arn "$LISTNER_ARN"
            fi

            echo "Tearing down default load balancer..."
            aws elbv2 delete-load-balancer --load-balancer-arn "$ALB_ARN" 1>/dev/null
        fi

        TG_ARN=$(aws elbv2 describe-target-groups \
                    --query "(TargetGroups[?TargetGroupName==\`$TARGET_GROUP_NAME\`])[0].TargetGroupArn" --output text)

        if [ $TG_ARN != "None" ]; then
            echo "Tearing down default target group..."
            aws elbv2 delete-target-group --target-group-arn "$TG_ARN" 1>/dev/null
        fi

        echo "Tearing down ECS cluster..."
        ecs-cli down "${@:2}"

        ;;

    compose)

        # When user runs: `./ecs compose service up`
        if [ "$2" == "service" ] && [ "$3" == "up" ]; then
            ROLE_ARN=$(aws iam list-roles --query '(Roles[?RoleName==`AWSServiceRoleForECS`])[0].Arn' --output text)
            TG_ARN=$(aws elbv2 describe-target-groups --query "TargetGroups[?TargetGroupName==\`$TARGET_GROUP_NAME\`].TargetGroupArn" --output text)
            ecs-cli compose service up \
                --target-group-arn "$TG_ARN" \
                --container-name app \
                --container-port 9000 \
                --create-log-groups \
                --health-check-grace-period 60 \
                --role "$ROLE_ARN" "${@:4}"
        else
            ecs-cli compose "${@:2}"
        fi

        ;;


    scale)

        ecs-cli scale --capability-iam "${@:2}"

        ;;

    tg)

        TG_ARN=$(aws elbv2 describe-target-groups \
            --query "(TargetGroups[?TargetGroupName==\`$TARGET_GROUP_NAME\`])[0].TargetGroupArn" --output text)
        echo "$TG_ARN"
        ;;

    alb)

        ALB_ARN=$(aws elbv2 describe-load-balancers \
            --query "(LoadBalancers[?LoadBalancerName==\`$LOAD_BALANCER_NAME\`])[0].LoadBalancerArn" --output text)
        echo "$ALB_ARN"

        ;;

    url)

        LB_DNS=$(aws elbv2 describe-load-balancers \
                    --query "(LoadBalancers[?LoadBalancerName==\`$LOAD_BALANCER_NAME\`])[0].DNSName" --output text)
        echo "http://$LB_DNS"

        ;;

    *)
        ecs-cli "$@"
        ;;

esac
